name: Deploy CTR System

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'testnet'
        type: choice
        options:
        - testnet
        - mainnet

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Run integration tests
        run: npm run test:integration

      - name: Run security tests
        run: npm run test:security

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Slither analysis
        run: |
          pip3 install slither-analyzer
          slither . --exclude-informational --exclude-low

      - name: Run Mythril analysis
        run: |
          pip3 install mythril
          myth analyze contracts/CivicTrustRegistry.sol

      - name: Run dependency audit
        run: npm audit --audit-level moderate

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npx hardhat compile

      - name: Generate deployment artifacts
        run: npm run build:artifacts

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            artifacts/
            cache/
            typechain-types/

  deploy-testnet:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.environment == 'testnet'
    environment: testnet
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .

      - name: Setup environment
        run: |
          echo "PRIVATE_KEY=${{ secrets.TESTNET_PRIVATE_KEY }}" >> .env
          echo "RPC_URL=${{ secrets.TESTNET_RPC_URL }}" >> .env
          echo "ETHERSCAN_API_KEY=${{ secrets.ETHERSCAN_API_KEY }}" >> .env

      - name: Deploy to testnet
        run: npx hardhat run scripts/deploy-complete-system.js --network testnet

      - name: Verify contracts on Etherscan
        run: npx hardhat run scripts/verify.js --network testnet

      - name: Run post-deployment tests
        run: npm run test:post-deployment

      - name: Health check
        run: npm run health-check:testnet

  deploy-mainnet:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'mainnet'
    environment: mainnet
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .

      - name: Setup environment
        run: |
          echo "PRIVATE_KEY=${{ secrets.MAINNET_PRIVATE_KEY }}" >> .env
          echo "RPC_URL=${{ secrets.MAINNET_RPC_URL }}" >> .env
          echo "ETHERSCAN_API_KEY=${{ secrets.ETHERSCAN_API_KEY }}" >> .env

      - name: Deploy to mainnet
        run: npx hardhat run scripts/deploy-complete-system.js --network mainnet

      - name: Verify contracts on Etherscan
        run: npx hardhat run scripts/verify.js --network mainnet

      - name: Run post-deployment tests
        run: npm run test:post-deployment

      - name: Health check
        run: npm run health-check:mainnet

  notify:
    needs: [deploy-testnet, deploy-mainnet]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup environment
        run: |
          echo "PRIVATE_KEY=${{ secrets.MAINNET_PRIVATE_KEY }}" >> .env
          echo "RPC_URL=${{ secrets.MAINNET_RPC_URL }}" >> .env

      - name: Rollback deployment
        run: npx hardhat run scripts/rollback.js --network mainnet

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "ðŸš¨ Deployment failed - Rollback initiated",
              "attachments": [{
                "color": "danger",
                "fields": [{
                  "title": "Environment",
                  "value": "${{ github.event.inputs.environment || 'testnet' }}",
                  "short": true
                }, {
                  "title": "Commit",
                  "value": "${{ github.sha }}",
                  "short": true
                }]
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }} 